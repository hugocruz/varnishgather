#!/bin/sh
#
# varnishgather - a data collection script for debugging Varnish issues.
#
# This script is non-invasive and can be run on production Varnish
# servers with no ill effect.
#
# Copyright (C) 2010-2016 Varnish Software AS <support@varnish-software.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

export LC_ALL=C


# Defines

HOSTPORT=""
NAME=""
VARNISH=""
VARNISHADMARG=""
SECRET=""
STATCMD=""
ITEM=0
TOPDIR=$(mktemp -d /tmp/varnishgather.XXXXXXXX)
ID="$(hostname)-$(date +'%Y-%m-%d')"
RELDIR="varnishgather-$ID"
DIR="$TOPDIR/$RELDIR"
LOG="$DIR/varnishgather.log"
ORIGPWD=$PWD
VERSION="1.49"
USERID=$(id -u)

# Set up environment

mkdir -p "$DIR"
cd "$DIR"

cleanup () {
	rm -rf "$TOPDIR"
	exit 1
}
trap cleanup EXIT 2

# Helpers

# Takes a string, translates it into something we can use as a log
# file name

item_num() {
	printf "%.3d" "$ITEM"
}

logname() {
	echo "$@" | tr -c '[:alnum:]-' '[_*]' | sed 's/_*$//'
}

log() {
	echo "$*" >>"$LOG"
}

info() {
	echo "Info: $*" >&2
	log "$@"
}

warn() {
	echo "Warning: $*" >&2
	log "$@"
}

incr() {
	ITEM=$((ITEM + 1))
}

taskecho() {
	echo "Task: $ITEM: $*"
}

banner() {
	log "--------------------------------"
	log "Item $ITEM: $*"
	log "--------------------------------"
	taskecho "$*"
}

run() {
	incr

	which "$1" >/dev/null 2>&1 || return 0

	OLDLOG="$LOG"
	LOG="${DIR}/$(item_num)_$(logname "$@")"
	banner "$@"
	("$@") >>"$LOG" 2>&1
	LOG="$OLDLOG"
}

pack_vcls() {
	incr
	taskecho "Compressing VCLs"
	tar cf "$DIR/$(item_num)_vcls.tar" $(findvcls) >>"$LOG" 2>&1
}

runpipe_recurse() {
	CMD="$1";
	shift;
	if [ "x$*" = "x" ]; then
		${CMD} 2>&1
	else
		${CMD} 2>&1 | runpipe_recurse "$@"
	fi
}

pipeprint() {
	CMD="$1";
	shift;
	if [ "x$*" = "x" ]; then
		echo ${CMD}
	else
		echo ${CMD} "|" $(pipeprint "$@")
	fi
}

runpipe() {
	incr
	OLDLOG="$LOG"
	LOG="${DIR}/$(item_num)_$(logname "$@")"
	banner $(pipeprint "$@")
	runpipe_recurse "$@" >> ${LOG} 2>&1
	LOG="$OLDLOG"
}

mycat() {
	if [ -r $1 ]; then
		run cat $1
	else
		incr
	fi
}

vadmin() {
	if [ ! -z "${VARNISHADMARG}" ]; then
		run varnishadm ${VARNISHADMARG} -- $* 2>/dev/null
	fi
}

vadmin_getvcls() {
	if [ ! -z "${VARNISHADMARG}" ]; then
		varnishadm ${VARNISHADMARG} vcl.list 2>/dev/null | awk '{print $NF}'
	fi
}

findvcls() {
	base_vcls=$(find /etc/varnish -name '*vcl' 2>/dev/null)
	[ -z "${base_vcls}" ] && return
	include_vcls=$(sed -e '/^include /!d; s/include\s*//g; s/[\";]//g' ${base_vcls})

	vcls=$(for file in $include_vcls ${base_vcls}; do
		is_absolute=$(echo $file | sed -e '/^\//!d')
		if [ -z "$is_absolute" ]; then
			file="/etc/varnish/$file"
		fi

		if [ -e "$file" ]; then
			echo $file;
		fi
	done | sort | uniq)

	echo $vcls
}

getarg()
{
	ret=""
	for a in `pgrep varnishd`; do
		if [ ! -d /proc/${a} ]; then
			info "proc non-functional. Automatic argument detection disabled."
			return
		fi
		tmpret=$(awk -v RS='\\x00' -v arg=$1 's == 1 {sec=$0};
                   $0 == arg {s=1}
                   $0 != arg {s=0}
                   s == 0 && index($0,arg) == 1 {sec=substr($0,length(arg)+1)}
                   END {print sec};' /proc/${a}/cmdline)
		if [ x$ret != "x" ] && [ $ret != $tmpret ]; then
			log "Weird argument mismatch: $ret vs $tmpret found"
			info "(Using last found/listed)"
		fi
		ret=${tmpret}
	done
	echo ${ret}
}

check_tools() {
	missing=
	for command in varnishadm varnishd varnishlog varnishstat; do
		if [ ! $(which $command) ]; then
			missing="$missing$command "
		fi
	done
	if [ -n "$missing" ]; then
		echo "#######################################################"
		echo "Some binaries are missing from PATH, the results might"
		echo "not be complete:"
		echo ""
		echo "    $missing"
		echo ""
		echo "Please amend your PATH and run again."
		echo "#######################################################"
		sleep 10
	fi
}

list_packages() {
	if [ $(which dpkg) ]; then
		runpipe "dpkg --list" "grep $1" sort
	elif [ $(which rpm) ]; then
		runpipe "rpm -qa" "grep $1" sort
	else
		incr
	fi
}

show_package() {
	run dpkg --status $1
	run rpm -qi $1
}

show_limits() {
	file="/proc/$(pgrep -n varnishd)/limits"

	incr

	OLDLOG="$LOG"
	LOG="${DIR}/$(item_num)_limits"
	banner limits
	log "$file"
	cat "$file" >> ${LOG} 2>&1
	LOG="$OLDLOG"
}

blockdev_cat() {
	echo -n >>${LOG} "$1:"
	cat "$1" >> ${LOG} 2>&1
}

blockdev() {
	incr

	OLDLOG="$LOG"
	LOG="${DIR}/$(item_num)_blockdev_info_$(logname "$1")"
	banner "blockdev info $1"
	blockdev_cat "$1/device/model"
	blockdev_cat "$1/queue/logical_block_size"
	blockdev_cat "$1/queue/physical_block_size"
	blockdev_cat "$1/queue/read_ahead_kb"
	blockdev_cat "$1/queue/minimum_io_size"
	blockdev_cat "$1/queue/optimal_io_size"
	LOG="$OLDLOG"
}

usage() {
	cat <<_EOF_
Usage: $0 [-n name] [-T host:port] [-S secretfile] [-h]

Varnishgather gathers various system information into a single tar-ball.

 -n <name>            Provide the name, same as the -n argument to varnishd
 -T <host:port>       Provide host and port for the management interface
                      Same as the -T option to varnishd.
 -S <secretfile>      Provide a secret file, same as -S to varnishd.
 -h                   Show this text.

All arguments are optional. varnishgather will attempt to detect the
arguments automatically, but will likely be confused if you have multiple
varnish servers running. In other words: Use -T, -n and -S if you have
multiple varnishd servers running on the same server.
_EOF_
	exit 1
}

if [ "${USERID}" -ne "0" ]; then
	echo "#######################################################"
	echo "Running as non-root, the results might not be complete."
	echo "Please run again as root."
	echo "#######################################################"
	sleep 10
fi

check_tools

##############################
# Proper execution starts here
##############################

info "Varnishgather version: $VERSION"
info "Invoked by: $USERID"
info "Command line: $*"
info "Working directory: $DIR"

TEMP=$(getopt n:T:S:h "$@")

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"

while true ; do
	case "$1" in
	-n) NAME=$2 ; shift 2;;
	-T) HOSTPORT="-T $2"; shift 2;;
	-S)
		if [ -r $2 ]; then
			SECRET="-S $2";
		else
			info "Secret file $2 not readable."
			exit 1;
		fi
		shift 2;;
	-h) usage; exit 0;;
	--) shift; break;;
	*) echo "internal error"; exit 1;;
	esac
done

if [ -z "$HOSTPORT" ]; then
	HOSTPORT=$(getarg -T)
	if [ -z "$HOSTPORT" ]; then
		warn "Without a hostname:port for the admin interface, this script is less useful"
	else
		info "Found hostport(-T argument): ${HOSTPORT}"
		HOSTPORT="-T ${HOSTPORT}"
	fi
fi

if [ -z "$SECRET" ]; then
	sec=$(getarg -S)
	if [ ! -z ${sec} ]; then
		if [ -r ${sec} ]; then
			info "Found secretfile(-S argument) ${sec} and it's readable. Using it."
			SECRET="-S ${sec}"
		elif [ -f /etc/varnish/secret ]; then
			warn "Found secretfile(-S argument) ${sec} but it's not readable"
		fi
	else
		info "Didn't find any -S argument"
	fi
fi

if [ -z "$NAME" ]; then
	NAMEARG=$(getarg -n)
	if [ ! -z "$NAMEARG" ]; then
		info "Found name: $NAMEARG"
		NAME="$NAMEARG"
	else
		info "No -n argument found."
	fi
fi

if [ ! -z "$NAME" ]; then
	STATCMD="-n $NAME"
fi

VARNISHADMARG="${SECRET} ${HOSTPORT}"
VARNISH=$(varnishd -V 2>&1)

info "Complete varnishadm command line deduced to: $VARNISHADMARG"
run varnishd -V
run varnishstat -V
run varnish-agent -V
run vha-agent -V
run date
run dmesg
mycat /var/log/dmesg
mycat /proc/cpuinfo
mycat /proc/version
runpipe "ps aux" "egrep (varnish|vha-agent|vac|vstatd|apache|mysql|nginx|httpd|stud|hitch|stunnel|api-engine)"
runpipe "netstat -np" "wc -l"
runpipe "netstat -np" "grep ESTABLISHED" "wc -l"
run uptime
run free -m
run vmstat 5 5
run mpstat -P ALL 1 5
run lsb_release -a
mycat /etc/redhat-release
run sysctl -a
run getenforce
run umask
list_packages varnish
list_packages vmod
show_package varnish
show_package varnish-plus
run dpkg --status libjemalloc1
run rpm -qi jemalloc
run dpkg --status libpcre3
run rpm -qi pcre
run dpkg --status ca-certificates
run rpm -qi ca-certificates
show_package gcc
run netstat -s
run ip a
run ip n
run ip r
run ip -s l
run uname -a
run mount
run df -h
run varnishstat -1 $STATCMD
run varnishstat -j $STATCMD
run ldd "$(which varnishd)"
run varnishadm debug.jemalloc_stats

NETSTAT="/bin/netstat"
run "$NETSTAT" -nlpt
run "$NETSTAT" -np

pack_vcls

mycat /etc/init.d/varnish
mycat /etc/default/varnish
mycat /etc/sysconfig/varnish
mycat /etc/varnish/varnish.params
mycat /etc/init.d/varnish-agent
mycat /etc/default/varnish-agent
mycat /etc/sysconfig/varnish-agent
mycat /var/lib/varnish-agent/agent.param
mycat /var/lib/varnish-agent/boot.vcl
mycat /sys/kernel/mm/transparent_hugepage/enabled
mycat /sys/kernel/mm/redhat_transparent_hugepage/enabled
mycat /proc/user_beancounters
mycat /proc/meminfo
show_limits

mycat /etc/sysconfig/vha-agent
mycat /etc/default/vha-agent
mycat /etc/init.d/vha-agent
mycat /etc/vha-agent/nodes.conf
mycat /etc/varnish/nodes.conf
mycat /var/lib/vha-agent/vha-status
show_package vha-agent
show_package varnish-plus-ha

mycat /etc/sysconfig/varnish-agent
mycat /etc/default/varnish-agent
mycat /etc/init.d/varnish-agent
show_package varnish-agent

mycat /etc/hitch/hitch.conf
show_package hitch
show_package varnish-plus-addon-ssl

mycat /etc/init.d/vac
mycat /opt/vac/etc/defaults
mycat /var/opt/vac/log/vac-stderr.log
mycat /var/opt/vac/log/vac.log
show_package vac

mycat /etc/sysconfig/vstatdprobe
mycat /etc/default/vstatdprobe
mycat /etc/init.d/vstatdprobe
mycat /etc/sysconfig/vstatd
mycat /etc/default/vstatd
mycat /etc/init.d/vstatd
run lsof -i :5558
show_package varnish-custom-statistics
show_package varnish-custom-statistics-probe

mycat /etc/hosts

run find /usr/local -name varnish
run find /var/lib/varnish -ls

for a in /sys/block/*; do
	blockdev "$a"
done

for a in /var/log/messages /var/log/syslog; do
	if [ -r "$a" ]; then
		run egrep "(varnish|vha-agent|hitch)" "$a"
	else
		incr
	fi
done

# ip tables
if  (lsmod | grep ip_tables > /dev/null); then
	run iptables-save
fi

if  (lsmod | grep ip6_tables > /dev/null); then
	run ip6tables-save
fi

# VCLs
for a in $(findvcls); do
	mycat $a
done

# maps
for pid in $(pidof varnishd); do
	runpipe "awk '$2 ~ \"rw\"' /proc/$pid/maps" "wc -l"
done

# Pick up the basic memory offset the text segments are in.
for pid in $(pidof varnishd); do
	run grep "r-xp" /proc/$pid/maps
done

if [ -z "${VARNISHADMARG}" ]; then
	banner "NO ADMINPORT SUPPLIED OR FOUND"
fi

# vadmin() tests for VARNISHADMARG as necessary

vadmin vcl.list

vcls="$(vadmin_getvcls)"
if [ -n "$vcls" ]; then
	case "$VARNISH" in
	*-4.0.[01]|*-[23].*)
		args=;;
	*)
		args="-v";;
	esac
	for vcl in $vcls; do
		vadmin vcl.show ${args} "$vcl"
	done
fi

vadmin param.show
case "$VARNISH" in
*-2.*)
	vadmin purge.list;;
*)
	vadmin ban.list;;
esac
case "$VARNISH" in
*-[23].*|*-4.0.*)
	vadmin debug.health;;
*)
	vadmin backend.list -p;;
esac
vadmin panic.show

case "$VARNISH" in
*-[23].*)
	args=;;
*)
	args="-g raw";;
esac
run timeout -s TERM 90 varnishlog -d ${args} -w "${DIR}/varnishlog.raw" $STATCMD

if [ -d "/etc/api-engine" ]; then
	# Packages
	runpipe "rpm -qa" "grep api-engine"
	run egrep api-engine "/var/log/yum.log"

	# Permissions
	run find /var/lib/api-engine -ls
	run find /etc/api-engine -ls
	run find /var/log/api-engine -ls

	# Log files
	mycat /var/log/api-engine/api-engine-rest.log
	mycat /var/log/api-engine/api-engine-rest-uwsgi.log
	mycat /var/log/api-engine/api-engine-sync.log
	mycat /var/log/api-engine/api-engine-syncreload.log

	# Configuration files
	mycat /etc/api-engine/api-engine-rest.cfg
	mycat /etc/api-engine/api-engine-rest-uwsgi.ini
	mycat /etc/api-engine/api-engine-syncutil.cfg
	run egrep -v ^password "/etc/api-engine/api-engine-sync.cfg"

	# Generated VCL
	mycat /var/lib/api-engine/sync/vcl/current.vcl
	find /var/lib/api-engine/sync/vcl/*.vcl -type f | while read f; do
		mycat "$f"
	done
fi

cd "$ORIGPWD"
TGZ="varnishgather.${ID}.tar.gz"
tar czf "$TGZ" -C "$TOPDIR" "$RELDIR"
echo "==============================================================================="
echo "Please submit the file: $TGZ"
echo "==============================================================================="
